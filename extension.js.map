{"version":3,"sources":["extension.es6"],"names":[],"mappings":"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","file":"extension.js","sourcesContent":["(function (appAPI) {\n    \"use strict\";\n\n\n\n    /************************************************************************************\n     This is your Page Code. The appAPI.ready() code block will be executed on every page load.\n     For more information please visit our docs site: http://docs.crossrider.com\n     *************************************************************************************/\n\n\n    appAPI.ready(function ($) {\n\n        console.log(\"Crossrider running on page with url:\\t\", document.location.href); //DEBUG\n\n        //Only continue if we're on an Amazon checkout page\n        if (!appAPI.isMatchPages(\"www.amazon.com/gp/buy/spc/handlers/display.html*\",\n                                 \"www.amazon.ca/gp/buy/spc/handlers/display.html*\",\n                                 \"www.amazon.co.uk/gp/buy/spc/handlers/display.html*\",\n                                 \"www.amazon.de/gp/buy/spc/handlers/display.html*\",\n                                 \"www.amazon.es/gp/buy/spc/handlers/display.html*\",\n                                 \"www.amazon.fr/gp/buy/spc/handlers/display.html*\",\n                                 \"www.amazon.it/gp/buy/spc/handlers/display.html*\",\n                                 \"www.amazon.co.jp/gp/buy/spc/handlers/display.html*\",\n                                 \"www.amazon.cn/gp/buy/spc/handlers/display.html*\",\n                                 \"smile.amazon.com/gp/buy/spc/handlers/display.html*\")) {\n            return;\n        }\n\n        console.log(\"This is an Amazon checkout page!:\\r\\n\" + document.location.href); //DEBUG: Show confirmation\n\n        let $body = $(\"body\");\n\n        //console.log($affilafriendPopup);\n\n        /*\n         *   This is where we receive info from the background code\n         *   The way Crossrider deals with communicating between the background and extension code doesn't allow for\n         *   callbacks, so we've got to engage in an elaborate call-and-response to move information.\n         *\n         *\n         * */\n        appAPI.message.addListener(function (message) {\n\n            if (message.key === \"affiliateTagSuccessful\") {\n\n                if (message.value) {\n                    console.log(\"TAG SUCCESSFUL! Here's the Affiliate ID you just tagged: \", message.value);\n\n                }\n                else {\n                    console.log(\"DID NOT JUST TAG ANYTHING...\");    //DEBUG\n                }\n            } else if (message.key === \"browserButtonActivated\") {\n\n                console.log(\"VISIBLE\");\n                //Make room for our frame to appear by applying the 'push' style to the body\n                $body.addClass(\"affilafriend-body-push\");\n                $affilafriendPopup.removeClass(\"hidden\");\n\n            } else if (message.key === \"browserButtonDeactivated\") {\n\n                console.log(\"INVISIBLE\");\n                $affilafriendPopup.addClass(\"hidden\");\n                $body.removeClass(\"affilafriend-body-push\");\n                //console.log($affilafriendPopup);\n\n            }\n        });\n\n        //Query the background to see if we just came from applying an affiliate tag\n        appAPI.message.toBackground({ action: \"checkAffiliateTagSuccessful\" });\n\n        //Globalize the jquery parameter, and cache the body for use in a few places\n        //$ = jQuery;\n\n        //  BEGIN: Inject\n\n        //DEBUG: Turn the background red as an easy visual confirmation that the extension is working\n        /* let elem = appAPI.dom.addInlineCSS({\n         css: \"body {background-color: red !important;}\"\n         });*/\n\n        //Remove all outside css influences using cleanslate.css\n        appAPI.resources.includeCSS(\"cleanslate.css\");\n\n        //Apply our css stylings\n        appAPI.resources.includeCSS(\"inject.css\");\n\n        //Now make room for our frame to appear by applying the 'push' style to the body\n        $body.addClass(\"affilafriend-body-push\");\n\n        let injectionHTML = appAPI.resources.get(\"inject.html\");\n\n        //console.log(injectionHTML);      //DEBUG\n\n        $body.append(injectionHTML);\n\n        //  END: Inject\n\n        let $affilafriendPopup = $(\"#affilafriend\").find(\".popup\");\n\n        /*\n         *   When the user clicks the close button, hide the frame\n         * */\n        $affilafriendPopup.find(\".close\").click(function ()\n                                                {\n\n                                                    //Let the background know that the frame was closed\n                                                    appAPI.message.toBackground({action: \"frameClosed\"});\n                                                    console.log(\"HIDE\");\n                                                    $affilafriendPopup.addClass(\"hidden\");\n                                                    $body.removeClass(\"affilafriend-body-push\");\n                                                    //console.log($affilafriendPopup);\n                                                }\n        );\n\n        /*\n         * Handle submission of affiliate link box.\n         * */\n        $affilafriendPopup.find(\"#linkForm\").submit(function (event)\n                                                    {\n                                                        event.preventDefault();\n                                                        let rawUserInput = event.target.affilafriend_link_input.value;\n                                                        let decodedUserInput;\n                                                        try\n                                                        {\n                                                            //In case the user-supplied affiliate link uses percent\n                                                            // encoding, decode it\n                                                             decodedUserInput = decodeURIComponent(rawUserInput);\n                                                        }\n                                                            //If the user-entered data has a lone '%' (and maybe some\n                                                            // other characters?), it will throw an error\n                                                        catch (e)\n                                                        {\n                                                            // console.warn(\"BAD DATES\", e);\n                                                            alert(\"The supplied string is invalid.\");\n                                                            //TODO: a styled in-page message\n                                                        }\n                                                        console.log(\"Decoded URL: \", decodedUserInput);\n                                                        /*\n                                                         *  Thanks to regexr.com for the assist in crafting this.\n                                                         *  Should match any tag parameter of the form &tag=thing-20 or\n                                                         *  ?tag=otherthing-401; use capture group 1\n                                                         *  (ie,searchResult[1]) to fetch just the ID itself.\n                                                         *  Hopefully Amazon is consistent about the format of their\n                                                         *  associate ID's,\n                                                         *  because I couldn't find anything\n                                                         *  official on how they are validated.\n                                                         */\n                                                        let tagExpression = /(?:[&?]tag=)([-\\w]+-\\d+)(?=&|$)/;\n                                                        //See if the user-supplied text contains an affiliate tag\n                                                        let searchResult = tagExpression.exec(decodedUserInput);\n                                                        //If nothing is found, complain about it and bail out\n                                                        if (!searchResult)\n                                                        {\n                                                            alert(\n                                                                \"The supplied string doesn't seem to contain a valid affiliate tag\"\n                                                            );\n                                                            //TODO: a styled in-page message\n                                                        }\n                                                        //Otherwise, grab the actual ID from the results\n                                                        let foundID = searchResult[1];\n                                                        console.log(foundID); //DEBUG\n                                                        //Grab the current URL\n                                                        let currentURL = document.location.href;\n\n                                                        /*\n                                                         *   A regex to match the first '?' found, or the end of the string, on the off-chance that there is no\n                                                         *   query string already.\n                                                         */\n                                                        let insertExpression = /[?]|$/;\n\n                                                        //Cobble together the string to insert into the current URL\n                                                        let replaceString = \"?tag=\" + foundID + \"&\"; //The '&' may end up being superfluous,\n                                                        // but doesn't hurt anything\n\n                                                        //Get a new URL, with the specified ID inserted all nice-like\n                                                        let taggedURL = currentURL.replace(insertExpression,\n                                                                                           replaceString\n                                                        );\n\n                                                        console.log(\"Replacement URL: \", taggedURL);\n\n                                                        appAPI.message.toBackground({\n                                                                                        action: \"setAffiliateTagSuccessful\",\n                                                                                        value: foundID\n                                                                                    }\n                                                        );\n\n                                                        //Now, load the new URL!\n                                                        appAPI.openURL({\n                                                                           url: taggedURL,\n                                                                           where: \"current\"\n                                                                           //where: \"tab\"\n                                                                       }\n                                                        );\n                                                        let successMessage = \"Affiliate ID \" + foundID + \" applied successfully!\"; //DEBUG\n                                                    }\n        );\n    });\n\n\n}(appAPI));"]}