{"version":3,"sources":["background.es6"],"names":[],"mappings":"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","file":"background.js","sourcesContent":["(function () {\n    \"use strict\";\n\n    let affiliateTagSuccessful = false;\n    let mostRecentIdUsed;\n\n     appAPI.ready(function () {\n\n         // Global variable to hold the toggle state of the button\n         let buttonActive = true;\n\n         // Sets the initial browser icon\n         appAPI.browserAction.setResourceIcon(\"images/icon.png\");\n         // Sets the tooltip for the button\n         appAPI.browserAction.setTitle(\"Affil-a-friend\");\n         // Sets the text and background color for the button\n         // appAPI.browserAction.setBadgeText(\"Icon\");\n         appAPI.browserAction.setBadgeBackgroundColor([0, 0, 0, 0]);\n         // Sets the initial onClick event handler for the button\n         appAPI.browserAction.onClick(function ()\n                                      {\n                                              if (buttonActive)\n                                              {\n                                                  // Sets the text and background color for the button\n                                                  // using the optional background parameter\n                                                  //appAPI.browserAction.setBadgeText('Xrdr', [0, 0, 255, 255]);\n                                                  // Sets the icon to use for the button.\n                                                  appAPI.browserAction.setResourceIcon(\"images/icon2.png\");\n                                                  //Alert the active page that the button was pressed\n                                                  appAPI.message.toActiveTab({key: \"browserButtonDeactivated\"});\n                                              } else\n                                              {\n                                                  // Remove the badge from the button\n                                                  //appAPI.browserAction.removeBadge();\n                                                  // Reset the icon for the image\n                                                  appAPI.browserAction.setResourceIcon(\"images/icon.png\");\n                                                  //Alert the active page that the button was pressed\n                                                  appAPI.message.toActiveTab({key: \"browserButtonActivated\"});\n                                              }\n                                              // Toggle the state\n                                              buttonActive = !buttonActive;\n\n                                      }\n         );\n         appAPI.message.toActiveTab({ string: \"BACKGROUND LOADED, BAE\" });\n\n         /*\n          *   This will be where we handle info that needs to persist between page loads, or would get lost in the\n          *   extension.es6 stuff.\n          * */\n\n\n         appAPI.message.addListener(function (message) {\n\n\n             if (message.action === \"frameClosed\") {\n                 //buttonActive = false;\n                 if (buttonActive)\n                 {\n                     // Sets the text and background color for the button\n                     // using the optional background parameter\n                     //appAPI.browserAction.setBadgeText('Xrdr', [0, 0, 255, 255]);\n                     // Sets the icon to use for the button.\n                     appAPI.browserAction.setResourceIcon(\"images/icon2.png\");\n                     //Alert the active page that the button was pressed\n                     appAPI.message.toActiveTab({key: \"browserButtonDeactivated\"});\n                 } else\n                 {\n                     // Remove the badge from the button\n                     //appAPI.browserAction.removeBadge();\n                     // Reset the icon for the image\n                     appAPI.browserAction.setResourceIcon(\"images/icon.png\");\n                     //Alert the active page that the button was pressed\n                     appAPI.message.toActiveTab({key: \"browserButtonActivated\"});\n                 }\n                 // Toggle the state\n                 buttonActive = !buttonActive;\n                 return;\n             }\n             if (message.action === \"setAffiliateTagSuccessful\") {\n                 affiliateTagSuccessful = true;\n                 mostRecentIdUsed = message.value;\n                 console.log(`setAffiliateTagSuccessful : ${affiliateTagSuccessful}\n                                id used: ${mostRecentIdUsed}\n                `);\n                 return;\n             }\n             if (message.action === \"unsetAffiliateTagSuccessful\") {\n                 affiliateTagSuccessful = false;\n                 mostRecentIdUsed = undefined;\n                 return;\n             }\n             if (message.action === \"checkAffiliateTagSuccessful\") {\n                 console.log(\"Tag success: \", affiliateTagSuccessful);\n                 if (affiliateTagSuccessful)\n                 {\n                     console.log(\"tag success, unsetting tag!\");\n\n                     appAPI.message.toActiveTab({ key: \"affiliateTagSuccessful\", value: mostRecentIdUsed });\n\n                     /*\n                      *  We want to unset it now, so that it doesn't falsely tell the user that\n                      *  they just used an affiliate tag on every following page load.\n                      * */\n                     affiliateTagSuccessful = false;\n                 } else {\n                     appAPI.message.toActiveTab({ key: \"affiliateTagSuccessful\", value: false });\n                 }\n             }\n\n             // appAPI.message.toActiveTab({string: \"Did someone try to contact the background?!\"});\n         });\n     });\n\n     //TODO: make a lovely api for messaging, complete with message object validation\n\n\n}());"]}